[gd_resource type="VisualShader" load_steps=28 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
output_port_for_preview = 0
operator = 2

[sub_resource type="StreamTexture" id=28]
flags = 6
load_path = "res://.import/noise.png-a5cb495e1c9f6281c22a3b0a0f68704b.stex"

[sub_resource type="VisualShaderNodeTexture" id=7]
texture = SubResource( 28 )

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeVectorCompose" id=9]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=10]
default_input_values = [ 0, 0.0, 1, 10.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=11]
output_port_for_preview = 0
function = 31

[sub_resource type="VisualShaderNodeVectorOp" id=12]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=13]
default_input_values = [ 0, 0.0, 1, 2.0 ]
operator = 5

[sub_resource type="VisualShaderNodeCompare" id=14]
output_port_for_preview = 0
default_input_values = [ 0, 0.0, 1, 0.3, 2, 1e-05 ]
function = 4

[sub_resource type="VisualShaderNodeScalarUniform" id=15]
uniform_name = "EdgeCrinkly"
default_value_enabled = true
default_value = 0.2

[sub_resource type="VisualShaderNodeScalarUniform" id=16]
uniform_name = "NoiseScale"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeColorUniform" id=17]
uniform_name = "Color_Light"
default_value_enabled = true
default_value = Color( 0.885158, 0.74099, 0.66283, 1 )

[sub_resource type="VisualShaderNodeColorUniform" id=18]
uniform_name = "Color_Dark"
default_value_enabled = true
default_value = Color( 0.539533, 0.40023, 0.239761, 1 )

[sub_resource type="VisualShaderNodeVectorInterp" id=19]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeTextureUniform" id=20]
output_port_for_preview = 0
uniform_name = "TexRidges"

[sub_resource type="VisualShaderNodeInput" id=2]
output_port_for_preview = 0
input_name = "uv"

[sub_resource type="VisualShaderNodeInput" id=21]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=22]
operator = 2

[sub_resource type="VisualShaderNodeScalarUniform" id=23]
uniform_name = "carrot_ridge_scale"
default_value_enabled = true
default_value = 1.0

[sub_resource type="VisualShaderNodeScalarOp" id=24]
output_port_for_preview = 0

[sub_resource type="VisualShaderNodeScalarOp" id=25]
output_port_for_preview = 0
operator = 2

[sub_resource type="VisualShaderNodeScalarFunc" id=26]
function = 18

[sub_resource type="VisualShaderNodeTextureUniform" id=27]
uniform_name = "GradientMap"
texture_type = 1

[sub_resource type="VisualShaderNodeScalarFunc" id=4]
output_port_for_preview = 0
function = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, 3.14 ]
operator = 2

[resource]
code = "shader_type canvas_item;
uniform float carrot_ridge_scale = 1;
uniform sampler2D TexRidges;
uniform sampler2D GradientMap : hint_albedo;
uniform float EdgeCrinkly = 0.2;



void vertex() {
// Output:0

}

void fragment() {
// Input:30
	vec3 n_out30p0 = vec3(UV, 0.0);

// ScalarUniform:32
	float n_out32p0 = carrot_ridge_scale;

// VectorOp:31
	vec3 n_out31p0 = n_out30p0 * vec3(n_out32p0);

// TextureUniform:29
	vec3 n_out29p0;
	float n_out29p1;
	{
		vec4 n_tex_read = texture(TexRidges, n_out31p0.xy);
		n_out29p0 = n_tex_read.rgb;
		n_out29p1 = n_tex_read.a;
	}

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// VectorDecompose:8
	float n_out8p0 = n_out3p0.x;
	float n_out8p1 = n_out3p0.y;
	float n_out8p2 = n_out3p0.z;

// ScalarOp:9
	float n_in9p1 = 3.14000;
	float n_out9p0 = n_out8p1 * n_in9p1;

// ScalarFunc:6
	float n_out6p0 = sin(n_out9p0);

// ScalarFunc:19
	float n_out19p0 = 1.0 - n_out6p0;

// ScalarOp:22
	float n_in22p1 = 2.00000;
	float n_out22p0 = pow(n_out19p0, n_in22p1);

// ScalarOp:33
	float n_out33p0 = dot(n_out29p0, vec3(0.333333, 0.333333, 0.333333)) + n_out22p0;

// ScalarFunc:35
	float n_out35p0 = min(max(n_out33p0, 0.0), 1.0);

// TextureUniform:36
	vec3 n_out36p0;
	float n_out36p1;
	{
		vec4 n_tex_read = texture(GradientMap, vec3(n_out35p0).xy);
		n_out36p0 = n_tex_read.rgb;
		n_out36p1 = n_tex_read.a;
	}

// ScalarUniform:24
	float n_out24p0 = EdgeCrinkly;

// Compare:23
	bool n_out23p0 = n_out35p0<n_out24p0;

// Output:0
	COLOR.rgb = n_out36p0;
	COLOR.a = (n_out23p0 ? 1.0 : 0.0);

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -422.745, -157.341 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 1640, 940 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -2560, 580 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -1040, 560 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( -2100, 560 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( -1400, 540 )
nodes/fragment/11/node = SubResource( 1 )
nodes/fragment/11/position = Vector2( 500, 380 )
nodes/fragment/13/node = SubResource( 7 )
nodes/fragment/13/position = Vector2( -260, 1640 )
nodes/fragment/14/node = SubResource( 8 )
nodes/fragment/14/position = Vector2( 900, 580 )
nodes/fragment/17/node = SubResource( 9 )
nodes/fragment/17/position = Vector2( -860, 1480 )
nodes/fragment/18/node = SubResource( 10 )
nodes/fragment/18/position = Vector2( -1280, 1540 )
nodes/fragment/19/node = SubResource( 11 )
nodes/fragment/19/position = Vector2( -480, 960 )
nodes/fragment/21/node = SubResource( 12 )
nodes/fragment/21/position = Vector2( 480, 1180 )
nodes/fragment/22/node = SubResource( 13 )
nodes/fragment/22/position = Vector2( -40, 1020 )
nodes/fragment/23/node = SubResource( 14 )
nodes/fragment/23/position = Vector2( 1020, 1220 )
nodes/fragment/24/node = SubResource( 15 )
nodes/fragment/24/position = Vector2( 460, 1700 )
nodes/fragment/25/node = SubResource( 16 )
nodes/fragment/25/position = Vector2( -2080, 1840 )
nodes/fragment/26/node = SubResource( 17 )
nodes/fragment/26/position = Vector2( -240, -920 )
nodes/fragment/27/node = SubResource( 18 )
nodes/fragment/27/position = Vector2( -240, -640 )
nodes/fragment/28/node = SubResource( 19 )
nodes/fragment/28/position = Vector2( 380, -840 )
nodes/fragment/29/node = SubResource( 20 )
nodes/fragment/29/position = Vector2( -1040, -400 )
nodes/fragment/30/node = SubResource( 21 )
nodes/fragment/30/position = Vector2( -1800, -400 )
nodes/fragment/31/node = SubResource( 22 )
nodes/fragment/31/position = Vector2( -1360, -400 )
nodes/fragment/32/node = SubResource( 23 )
nodes/fragment/32/position = Vector2( -2000, -260 )
nodes/fragment/33/node = SubResource( 24 )
nodes/fragment/33/position = Vector2( -440, 40 )
nodes/fragment/34/node = SubResource( 25 )
nodes/fragment/34/position = Vector2( 80, 100 )
nodes/fragment/35/node = SubResource( 26 )
nodes/fragment/35/position = Vector2( 160, -200 )
nodes/fragment/36/node = SubResource( 27 )
nodes/fragment/36/position = Vector2( 760, -300 )
nodes/fragment/connections = PoolIntArray( 3, 0, 8, 0, 8, 1, 9, 0, 9, 0, 6, 0, 6, 0, 11, 1, 11, 0, 14, 0, 8, 1, 17, 0, 18, 0, 17, 1, 6, 0, 19, 0, 13, 0, 21, 0, 21, 0, 11, 0, 19, 0, 22, 0, 22, 0, 21, 1, 23, 0, 0, 1, 17, 0, 13, 0, 24, 0, 23, 1, 25, 0, 18, 1, 8, 0, 18, 0, 26, 0, 28, 0, 27, 0, 28, 1, 30, 0, 31, 0, 32, 0, 31, 1, 31, 0, 29, 0, 29, 0, 33, 0, 33, 0, 34, 0, 22, 0, 33, 1, 33, 0, 35, 0, 35, 0, 28, 2, 35, 0, 36, 0, 36, 0, 0, 0, 35, 0, 23, 0 )
